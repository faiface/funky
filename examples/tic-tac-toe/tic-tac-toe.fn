# Run with `funkygame`

union Player = none | cross | circle

func none? : Player -> Bool =
    \player
    switch player
    case none   true
    case cross  false
    case circle false

func other : Player -> Player =
    \player
    switch player
    case none   none
    case cross  circle
    case circle cross

record Board =
    width  : Int,
    height : Int,
    field  : Field Player,

func make-board : Int -> Int -> Board =
    \width \height
    Board width height (empty none)

func at : Int -> Int -> Board -> Player =
    \x \y \board
    (at x y . field) board

func at : Int -> Int -> (Player -> Player) -> Board -> Board =
    \x \y \f \board
    (field . at x y) f board

record Images =
    square : Image,
    cross  : Image,
    circle : Image,

func square-sprite : Image -> Point -> Float -> Sprite =
    \image \position \size
    Sprite image position zero 0.0 (size / float (width image)) white

func select-image : Player -> Images -> Image =
    \player \images
    switch player
    case none   panic "none"
    case cross  cross images
    case circle circle images

func draw : Float -> Images -> Board -> Loop -> Loop =
    \size \images \board \next
    for-pair (rangex-2d (width board) (height board)) (
        \ix \iy \next
        let (float ix * size) \x
        let (float iy * size) \y
        draw (square-sprite (square images) (pt x y) size);
        when (not none? (at ix iy board))
            (draw (square-sprite (select-image (at ix iy board) images) (pt x y) size));
        next
    );
    next

record Vars =
    timeout  : Int,
    cursor-x : Int,
    cursor-y : Int,
    player   : Player,
    board    : Board,

func main : Game =
    load-image "square.png"   \square-image
    load-image "cross.png"    \cross-image
    load-image "circle.png"   \circle-image
    load-image "selected.png" \selected-image
    let (Images square-image cross-image circle-image) \images
    start "Tic Tac Toe" 640 640;
    start-with (Vars 0 5 5 cross (make-board 10 10));
    recur \loop
    return \s
    let (pt (float (cursor-x s) * 64.0) (float (cursor-y s) * 64.0)) \cursor-pos
    let (square-sprite selected-image cursor-pos 64.0) \cursor
    fill (rgb 0.5 0.8 0.2);
    draw 64.0 images (board s);
    draw cursor;
    present \input
    start-with s;
    when (timeout s > 0) (timeout <- dec);
    when (timeout s <= 0) (
        \next
        when (left input) (cursor-x <- dec);
        when (right input) (cursor-x <- inc);
        when (up input) (cursor-y <- dec);
        when (down input) (cursor-y <- inc);
        when (left input || right input || up input || down input) (timeout := 15);
        next
    );
    when (space input && none? (at (cursor-x s) (cursor-y s) (board s))) (
        \next
        player -> \pl
        (board . at (cursor-x s) (cursor-y s)) := pl;
        player <- other;
        next
    );
    loop
