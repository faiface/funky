func map : (a -> State s b) -> List a -> State s (List b) =
    \f \list
    switch list
    case []
        return []
    case (::) \x \xs
        do (f x)      \y
        do (map f xs) \ys
        return (y :: ys)

func list->string : (a -> String) -> List a -> String =
    \string \list
    if (empty? list)
        "";
    if (empty? (rest list))
        (string (first list));
    string (first list) ++ ", " ++ list->string string (rest list)

func distinct-up-to-99 : List Int -> Int =
    \numbers
    start-with (array (take 100; repeat 0));
    for numbers
        (\i index i <- inc);
    view (return . length . filter (!= 0) . list)

record Vars =
    count : Int,
    sum   : Int,

func initial-vars : Vars = Vars 0 0

func main' : IO =
    start-with initial-vars;
    count := 0;
    sum := 0;
    fix \loop
    retreat \vars
    println ("count: " ++ string (count vars));
    println ("sum:   " ++ string (sum vars));
    print "type a word: ";
    scanln \word
    start-with vars;
    if (word == ":reset") (
        count := 0;
        sum := 0;
        loop
    );
    count <- inc;
    sum <- + length word;
    loop

func main : IO =
    start-with (make-array 7 (const 0));
    length -> \n
    for (rangex n) (
        \i \next
        index i := i;
        next
    );
    for (rangex (n / 2)) (
        \i \next
        index i -> \tmp
        index i <= index (n - inc i);
        index (n - inc i) := tmp;
        next
    );
    retreat \arr
    for (list arr)
        (println . string);
    done
