func merge-sort : (a -> a -> Bool) -> List a -> List a =
    \(<) \list
    if (empty? list || empty? (rest list))
        list;
    let (length list / 2) \half
    let (take half list)  \left
    let (drop half list)  \right
    merge (<) (merge-sort (<) left) (merge-sort (<) right)

func merge : (a -> a -> Bool) -> List a -> List a -> List a =
    \(<) \left \right
    if (empty? left)
        right;
    if (empty? right)
        left;
    if (first right < first left)
        (first right :: merge (<) left (rest right));
    first left :: merge (<) (rest left) right

func list->string : (a -> String) -> List a -> String =
    \string \list
    if (empty? list)
        "";
    if (empty? (rest list))
        (string (first list));
    string (first list) ++ ", " ++ list->string string (rest list)

func main : IO =
    let [7, 8, 1, 9, 4, 3, 10, 6, 2] \nums
    let (merge-sort (<) nums)        \sorted
    println (list->string string sorted);
    done

func main' : IO =
    100 |> 1 |> fix \loop \low \high
        let ((low + high) / 2) \mid
        print ("Is your number " ++ string mid ++ "? ");
        scanln \answer
        if (answer == "less")
            (loop low (mid - 1));
        if (answer == "more")
            (loop (mid + 1) high);
        if (answer == "yes")
            (println "Yay!"; done);
        println "You need to type one of less/more/yes.";
        loop low high
