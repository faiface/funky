union Player = none | cross | circle

func none? : Player -> Bool =
    \player
    switch player
    case none   true
    case cross  false
    case circle false

func other : Player -> Player =
    \player
    switch player
    case none   none
    case cross  circle
    case circle cross

record Board =
    width  : Int,
    height : Int,
    rows   : Array (Array Player),

func make-board : Int -> Int -> Board =
    \width \height
    Board width height;
    make-array height \y
    make-array width  \x
    none

func index : Int -> Int -> Board -> Player =
    \x \y \board
    (index x . index y . rows) board

func index : Int -> Int -> (Player -> Player) -> Board -> Board =
    \x \y \f \board
    (rows . index y . index x) f board

record Images =
    square : Image,
    cross  : Image,
    circle : Image,

func square-sprite : Image -> Vec2D -> Float -> Sprite =
    \image \position \size
    Sprite image position zero 0.0 (size / float (width image))

func select-image : Player -> Images -> Image =
    \player \images
    switch player
    case none   error "none"
    case cross  cross images
    case circle circle images

func draw : Float -> Images -> Board -> List Sprite =
    \size \images \board
    for (rangex (width board)) (
        \ix \next
        for (rangex (height board)) (
            \iy \next
            let (float ix * size) \x
            let (float iy * size) \y
            yield (square-sprite (square images) (vec x y) size);
            when (not none? (index ix iy board))
                (yield (square-sprite (select-image (index ix iy board) images) (vec x y) size));
            next
        );
        next
    );
    empty

record Vars =
    timeout  : Int,
    cursor-x : Int,
    cursor-y : Int,
    player   : Player,
    board    : Board,

func main : Loader =
    load-image "square.png"   \square-image
    load-image "cross.png"    \cross-image
    load-image "circle.png"   \circle-image
    load-image "selected.png" \selected-image
    let (Images square-image cross-image circle-image) \images
    start "Tic Tac Toe" 640 640;
    start-with (Vars 0 5 5 cross (make-board 10 10));
    fix \loop
    retreat \s
    let (vec (float (cursor-x s) * 64.0) (float (cursor-y s) * 64.0)) \cursor-pos
    let (square-sprite selected-image cursor-pos 64.0) \cursor
    frame (draw 64.0 images (board s) ++ [cursor]) \input
    start-with s;
    when (timeout s > 0) (timeout <- dec);
    when (timeout s <= 0) (
        \next
        when (left input) (cursor-x <- dec);
        when (right input) (cursor-x <- inc);
        when (up input) (cursor-y <- dec);
        when (down input) (cursor-y <- inc);
        when (left input || right input || up input || down input) (timeout := 15);
        next
    );
    when (space input && none? (index (cursor-x s) (cursor-y s) (board s))) (
        \next
        (board . index (cursor-x s) (cursor-y s)) <= player;
        player <- other;
        next
    );
    loop
