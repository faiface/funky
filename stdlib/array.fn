record Array a =
    _default : a,
    _left    : Slots a,
    _right   : Slots a,

func empty : a -> Array a = \default Array default empty empty

func array : a -> List a -> Array a =
    \default \list
    start-with (empty default);
    for-pair (enumerate list)
        (\i \x at i := x);
    return self

func at : Int -> Array a -> a =
    \i \array
    if (i < 0) (_default array ? at (neg i) (_left array));
    _default array ? at i (_right array)

func at : Int -> (a -> a) -> Array a -> Array a =
    \i \f \array
    if (i < 0) ((_left . at (neg i)) (\m some; f; _default array ? m) array);
    (_right . at i) (\m some; f; _default array ? m) array

func reset : Int -> Array a -> Array a =
    \i \array
    if (i < 0) ((_left . at (neg i)) (const none) array);
    (_right . at i) (const none) array

func swap : Int -> Int -> Array a -> Array a =
    \i \j \array
    start-with array;
    at i -> \at-i
    at j -> \at-j
    at i := at-j;
    at j := at-i;
    return self
