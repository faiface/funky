union Array a = _single a | _empty Int | _node Int (Array a) (Array a)

func empty : Array a = _empty 0

func array : List a -> Array a =
    fold> (::) empty

func list : Array a -> List a =
    \arr
    switch arr
    case _single \x            [x]
    case _empty \_             []
    case _node \_ \left \right list left ++ list right

func empty? : Array a -> Bool =
    \arr
    switch arr
    case _single \_     false
    case _empty \_      true
    case _node \_ \_ \_ false

func _level : Array a -> Int =
    \arr
    switch arr
    case _single \_     0
    case _empty \n      n
    case _node \n \_ \_ n

func :: : Array a -> a -> Array a =
    \arr \x
    switch arr
    case _single \y
        _node 1 (_single y) (_single x)
    case _empty \n
        if (n == 0)
            (_single x);
        _node n (_empty (n - 1) :: x) (_empty (n - 1))
    case _node \n \left \right
        if (empty? right) (
            let (left :: x) \new-left
            if (_level new-left < n)
                (_node n new-left right);
            new-left
        );
        let (right :: x) \new-right
        if (_level new-right < n)
            (_node n left new-right);
        _node (n + 1) (_node n left right) (_empty n :: x)

func ++ : Array a -> List a -> Array a =
    fold> (::)

func index : Int -> Array a -> a =
    \i \arr
    switch arr
    case _single \x
        if (i != 0)
            (error "index out of range");
        x
    case _empty \_
        error "index out of range"
    case _node \n \left \right
        let (2 ^ n - 1) \mid
        if (i < mid)
            (index i left);
        index (i - mid) right

func index : Int -> (a -> a) -> Array a -> Array a =
    \i \f \arr
    switch arr
    case _single \x
        if (i != 0)
            (error "index out of range");
        _single (f x)
    case _empty \_
        error "index out of range"
    case _node \n \left \right
        let (2 ^ n - 1) \mid
        if (i < mid)
            (_node n (index i f left) right);
        _node n left (index (i - mid) f right)

func length : Array a -> Int =
    \arr
    switch arr
    case _single \_
        1
    case _empty \_
        0
    case _node \n \left \right
        if (empty? right)
            (length left);
        (2 ^ n - 1) + length right
