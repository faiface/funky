union Array a = empty | _node (Maybe a) (Array a) (Array a)

func array : List a -> Array a =
    \list
    start-with empty;
    for-pair (enumerate list) (\i \x index i := just x);
    return self

func empty? : Array a -> Bool =
    \arr
    switch arr
    case empty            true
    case _node \m \a1 \a2 false

func _collapse : Array a -> Array a =
    \arr
    switch arr
    case empty
        arr
    case _node \m \a1 \a2
        if (nothing? m && empty? a1 && empty? a2) empty arr

func index : Int -> Array a -> Maybe a =
    \i \arr
    switch arr
    case empty
        nothing
    case _node \m \a1 \a2
        if (i == 0) m;
        if (odd? i) (index (i / 2) a1);
        index (dec i / 2) a2

func index : Int -> (Maybe a -> Maybe a) -> Array a -> Array a =
    \i \f \arr
    _collapse;
    switch arr
    case empty
        index i f (_node nothing empty empty)
    case _node \m \a1 \a2
        if (i == 0) (_node (f m) a1 a2);
        if (odd? i) (_node m (index (i / 2) f a1) a2);
        _node m a1 (index (dec i / 2) f a2)

func map : (a -> Maybe b) -> Array a -> Array b =
    \f \arr
    switch arr
    case empty
        empty
    case _node \m \a1 \a2
        _node (let-maybe m f) (map f a1) (map f a2)

func map : (a -> b) -> Array a -> Array b =
    \f \arr
    switch arr
    case empty
        empty
    case _node \m \a1 \a2
        _node (map f m) (map f a1) (map f a2)
