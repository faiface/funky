record List-Set a =
    _equals : a -> a -> Bool,
    _values : List a,

func list-set : (a -> a -> Bool) -> List a -> List-Set a =
    \equals \values
    add-all values (List-Set equals [])

func values : List-Set a -> List a = _values

func empty? : List-Set a -> Bool = empty? . _values

func contains? : a -> List-Set a -> Bool =
    \x \set
    any (_equals set x) (_values set)

func add : a -> List-Set a -> List-Set a =
    \x \set
    _values (x ::) (remove x set)

func add-all : List a -> List-Set a -> List-Set a =
    \xs \set
    fold< add xs set

func remove : a -> List-Set a -> List-Set a =
    \x \set
    _values (filter (not; _equals set x)) set

func remove-all : List a -> List-Set a -> List-Set a =
    \xs \set
    fold< remove xs set

func find : (a -> Bool) -> List-Set a -> Maybe a =
    \p \set
    first (filter p; _values set)

func + : List-Set a -> List-Set a -> List-Set a =
    \set1 \set2
    add-all (_values set2) set1

func - : List-Set a -> List-Set a -> List-Set a =
    \set1 \set2
    remove-all (_values set2) set1

func & : List-Set a -> List-Set a -> List-Set a =
    \set1 \set2
    _values (filter (\x contains? x set2)) set1

func <= : List-Set a -> List-Set a -> Bool =
    \set1 \set2
    all (\x contains? x set2) (_values set1)

func >= : List-Set a -> List-Set a -> Bool =
    flip (<=)

func == : List-Set a -> List-Set a -> Bool =
    (<=) && (>=)

func != : List-Set a -> List-Set a -> Bool =
    not (==)

func < : List-Set a -> List-Set a -> Bool =
    (<=) && not (>=)

func > : List-Set a -> List-Set a -> Bool =
    (>=) && not (<=)

func subsets : List-Set a -> List (List-Set a) =
    \set
    if (empty? set) [set];
    pick (subsets (_values rest! set)) \subset-rest
    [subset-rest, _values (first! (_values set) ::) subset-rest]
