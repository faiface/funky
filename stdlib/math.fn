func even? : Int -> Bool = \i 0 == i % 2
func odd?  : Int -> Bool = \i 1 == i % 2

func min : Int -> Int -> Int = \x \y if (x < y) x y
func max : Int -> Int -> Int = \x \y if (x > y) x y

func min : Float -> Float -> Float = \x \y if (x < y) x y
func max : Float -> Float -> Float = \x \y if (x > y) x y

func min : List Int -> Maybe Int =
    \nums
    if (empty? nums) none;
    some; fold> min (first! nums) (rest! nums)

func max : List Int -> Maybe Int =
    \nums
    if (empty? nums) none;
    some; fold> max (first! nums) (rest! nums)

func min! : List Int -> Int = \nums panic "min!: empty list" ? min nums
func max! : List Int -> Int = \nums panic "max!: empty list" ? max nums

func min : List Float -> Float =
    \nums
    fold> min +inf nums

func max : List Float -> Float =
    \nums
    fold> max -inf nums

func exp : Float -> Float = e ^

func sum : List Int -> Int     = \nums fold> (+) 0 nums
func sum : List Float -> Float = \nums fold> (+) 0.0 nums

func product : List Int -> Int     = \nums fold> (*) 1 nums
func product : List Float -> Float = \nums fold> (*) 1.0 nums

record Rat =
    num : Int,
    den : Int,

func gcd : Int -> Int -> Int =
    \a \b
    if (zero? b) a;
    gcd b (a % b)

func norm : Rat -> Rat =
    \x
    let (gcd (abs; num x) (abs; den x)) \d
    if (d == 0) x;
    if (den x < 0) (Rat (num x / neg d) (den x / neg d));
    Rat (num x / d) (den x / d)

func string : Rat -> String =
    \x
    if (den x == 1) (string (num x));
    string (num x) ++ "/" ++ string (den x)

func float : Rat -> Float =
    \x
    float (num x) / float (den x)

func rat : Int -> Rat = \n Rat n 1

func // : Int -> Int -> Rat =
    \a \b
    norm (Rat a b)

func neg : Rat -> Rat =
    \x
    Rat (neg; num x) (den x)

func inv : Rat -> Rat =
    \x
    Rat (den x) (num x)

func + : Rat -> Rat -> Rat =
    \x \y
    ((num x * den y) + (num y * den x)) // (den x * den y)

func - : Rat -> Rat -> Rat =
    \x \y
    x + neg y

func * : Rat -> Rat -> Rat =
    \x \y
    (num x * num y) // (den x * den y)

func / : Rat -> Rat -> Rat =
    \x \y
    x * inv y

func ^ : Rat -> Int -> Rat =
    \x \n
    if (n < 0) (inv (x ^ neg n));
    (n * (x *)) (1 // 1)

func == : Rat -> Rat -> Bool =
    \x \y
    (den x == den y) && (num x == num y)

func != : Rat -> Rat -> Bool =
    \x \y
    (den x != den y) || (num x != num y)

func < : Rat -> Rat -> Bool =
    \x \y
    (num x * den y) < (num y * den x)

func <= : Rat -> Rat -> Bool =
    \x \y
    (num x * den y) <= (num y * den x)

func > : Rat -> Rat -> Bool =
    \x \y
    (num x * den y) > (num y * den x)

func >= : Rat -> Rat -> Bool =
    \x \y
    (num x * den y) >= (num y * den x)
