alias String = List Char

func == : String -> String -> Bool =
    \left \right
    if (empty? left && empty? right) true;
    if (empty? left || empty? right) false;
    if (first! left != first! right) false;
    rest! left == rest! right

func != : String -> String -> Bool = not (==)

func prefix? : String -> String -> Bool =
    \prefix \s
    take (length prefix) s == prefix

func % : String -> List String -> String =
    \format \substs
    if (empty? format) "";
    if (prefix? "%%" format)
        ('%' :: rest! (rest! format) % substs);
    if (prefix? "%s" format && not empty? substs)
        (first! substs ++ rest! (rest! format) % rest! substs);
    first! format :: rest! format % substs

func string : Char -> String   = \c [c]
func string : String -> String = self

func left-pad : Char -> Int -> String -> String =
    \c \width \s
    take (width - length s) (repeat c) ++ s

func right-pad : Char -> Int -> String -> String =
    \c \width \s
    s ++ take (width - length s) (repeat c)

func format-table : Int -> List (List String) -> String =
    \spacing \rows
    let (transpose rows)           \columns
    let (map (map length) columns) \cell-lengths
    let (map max! cell-lengths)    \column-widths
    for rows (
        \row \next
        for-pair (zip pair row column-widths) (
            \cell \width \next
            yield-all (right-pad ' ' (width + spacing) cell);
            next
        );
        yield '\n';
        next
    );
    empty
