union IO = done | putc Char IO | getc (Char -> IO)

func print   : String -> IO -> IO = fold< putc
func println : String -> IO -> IO = print . (++ "\n")

func ungetc : Char -> IO -> IO =
    \c \io
    switch io
    case done
        done
    case putc \d \jo
        putc d;
        ungetc c;
        jo
    case getc \f
        f c

func unscan : String -> IO -> IO =
    \s \io
    if (empty? s)
        io;
    switch io
    case done
        done
    case putc \d \jo
        putc d;
        unscan s;
        jo
    case getc \f
        unscan (rest s);
        f (first s)

func whitespace? : Char -> Bool =
    \c
    any (c ==) [' ', '\t', '\n', '\r']

func skip-whitespace : IO -> IO =
    \io
    getc \c
    if (whitespace? c) (
        skip-whitespace;
        io
    );
    ungetc c;
    io

func scan : (String -> IO) -> IO =
    \f
    skip-whitespace;
    "" |> fix \loop \s
        getc \c
        if (whitespace? c) (
            ungetc c;
            f (reverse s)
        );
        loop (c :: s)

func scanln : (String -> IO) -> IO =
    \f
    "" |> fix \loop \s
        getc \c
        if (c == '\n')
            (f (reverse s));
        loop (c :: s)
