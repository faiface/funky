union List a = empty | a :: List a

func yield : a -> List a -> List a = ::

func yield-all : List a -> List a -> List a = ++

func empty? : List a -> Bool =
    \list
    switch list
    case empty       true
    case (::) \x \xs false

func first : List a -> Maybe a =
    \list
    switch list
    case empty       none
    case (::) \x \xs some x

func first! : List a -> a = \list panic "first!: empty list" ? first list

func rest : List a -> Maybe (List a) =
    \list
    switch list
    case empty       none
    case (::) \x \xs some xs

func rest! : List a -> List a = \list panic "rest!: empty list" ? rest list

func last : List a -> Maybe a =
    \list
    switch list
    case empty       none
    case (::) \x \xs if (empty? xs) (some x) (last xs)

func last! : List a -> a = \list panic "last!: empty list" ? last list

func length : List a -> Int = fold> (\n \_ inc n) 0

func take : Int -> List a -> List a =
    \n \list
    if (n < 0) (take (max 0 (length list + n)) list);
    if (n == 0)      [];
    if (empty? list) [];
    first! list :: take (dec n) (rest! list)

func take-while : (a -> Bool) -> List a -> List a =
    \p \list
    switch list
    case empty
        []
    case (::) \x \xs
        if (p x) (x :: take-while p xs) []

func drop : Int -> List a -> List a =
    \n \list
    if (n < 0) (drop (max 0 (length list + n)) list);
    if (n == 0)      list;
    if (empty? list) [];
    drop (dec n) (rest! list)

func drop-while : (a -> Bool) -> List a -> List a =
    \p \list
    switch list
    case empty
        []
    case (::) \x \xs
        if (p x) (drop-while p xs) list

func slice : Int -> Int -> List a -> List a =
    \from \to \list
    if (from < 0) (slice (max 0 (length list + from)) to list);
    drop from (take to list)

func at : Int -> List a -> Maybe a =
    \i \list
    first (drop i list)

func at! : Int -> List a -> a = \i \list panic "at!: out of range" ? at i list

func at : Int -> (a -> a) -> List a -> List a =
    \i \f \list
    let (drop i list) \tail
    take i list ++ f (first! tail) :: rest! tail

func fold< : (a -> b -> b) -> List a -> b -> b =
    \f \list \zero
    switch list
    case empty
        zero
    case (::) \x \xs
        f x (fold< f xs zero)

func fold> : (b -> a -> b) -> b -> List a -> b =
    \f \zero \list
    switch list
    case empty
        zero
    case (::) \x \xs
        fold> f (strict f zero x) xs

func map : (a -> b) -> List a -> List b =
    \f \list
    switch list
    case empty       empty
    case (::) \x \xs f x :: map f xs

func filter : (a -> Bool) -> List a -> List a =
    \p \list
    switch list
    case empty       empty
    case (::) \x \xs when (p x) (yield x) (filter p xs)

func zip : (a -> b -> c) -> List a -> List b -> List c =
    \f \left \right
    if (empty? left || empty? right) [];
    f (first! left) (first! right) :: zip f (rest! left) (rest! right)

func ++ : List a -> List a -> List a = \l \r fold< (::) l r

func concat : List (List a) -> List a = \lists fold< (++) lists []

func pick : List a -> (a -> List b) -> List b =
    \list \f
    (concat . map) f list

func pairwise : (a -> b -> c) -> List a -> List b -> List c =
    \f \list1 \list2
    pick list1 \x
    map (f x) list2

func any : (a -> Bool) -> List a -> Bool =
    \p \list
    fold< ((||) . p) list false

func all : (a -> Bool) -> List a -> Bool =
    \p \list
    fold< ((&&) . p) list true

func count : (a -> Bool) -> List a -> Int =
    \pred \list
    fold> (\n \x if (pred x) (inc n) n) 0 list

func repeat : a -> List a = \x x :: repeat x

func * : Int -> List a -> List a =
    \n \list
    if (n <= 0) [];
    list ++ dec n * list

func reverse : List a -> List a =
    \list
    [] |> list |> recur \loop \left \right
        if (empty? left) right;
        loop (rest! left) (first! left :: right)

func transpose : List (List a) -> List (List a) =
    \rows
    if (all empty? rows) [];
    filter-some (map first rows) :: transpose (filter-some; map rest rows)

func range : Int -> Int -> List Int =
    \from \to
    if (from > to) [];
    from :: range (inc from) to

func rangex : Int -> List Int = \n range 0 (dec n)

func range-2d : Int -> Int -> Int -> Int -> List (Pair Int Int) =
    \from1 \from2 \to1 \to2
    pairwise pair (range from1 to1) (range from2 to2)

func rangex-2d : Int -> Int -> List (Pair Int Int) =
    \n1 \n2
    pairwise pair (rangex n1) (rangex n2)

func iterate : (a -> a) -> a -> List a =
    \f \z
    z :: iterate f (strict f z)

func enumerate : List a -> List (Pair Int a) =
    zip pair (iterate inc 0)
