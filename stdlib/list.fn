union List a = empty | a :: List a

func yield : a -> List a -> List a = (::)

func empty? : List a -> Bool =
    \list
    switch list
    case empty true
    case (::)  \_ \_ false

func first : List a -> a =
    \list
    switch list
    case empty error "first: empty list"
    case (::)  \x \xs x

func rest : List a -> List a =
    \list
    switch list
    case empty error "rest: empty list"
    case (::)  \x \xs xs

func length : List a -> Int = fold> (\n \_ n + 1) 0

func take : Int -> List a -> List a =
    \n \list
    if (n <= 0)
        [];
    if (empty? list)
        [];
    first list :: take (n - 1) (rest list)

func take-while : (a -> Bool) -> List a -> List a =
    \p \list
    switch list
    case empty
        []
    case (::) \x \xs
        if (p x)
            (x :: take-while p xs);
        []

func drop : Int -> List a -> List a =
    \n \list
    if (n <= 0)
        list;
    if (empty? list)
        [];
    drop (n - 1) (rest list)

func drop-while : (a -> Bool) -> List a -> List a =
    \p \list
    switch list
    case empty
        []
    case (::) \x \xs
        if (p x)
            (drop-while p xs);
        list

func (@) : List a -> Int -> a =
    \list \index
    first (drop index list)

func fold< : (a -> b -> b) -> b -> List a -> b =
    \f \zero \list
    switch list
    case empty
        zero
    case (::) \x \xs
        f x (fold< f zero xs)

func fold> : (b -> a -> b) -> b -> List a -> b =
    \f \zero \list
    switch list
    case empty
        zero
    case (::) \x \xs
        let (f zero x) \new-zero
        eval new-zero;
        fold> f new-zero xs

func map : (a -> b) -> List a -> List b =
    \f
    fold< ((::) . f) []

func filter : (a -> Bool) -> List a -> List a =
    \p \list
    switch list
    case empty
        [];
    case (::) \x \xs
        if (p x)
            (x :: filter p xs);
        filter p xs

func zip : (a -> b -> c) -> List a -> List b -> List c =
    \f \left \right
    if (empty? left || empty? right)
        [];
    f (first left) (first right) :: zip f (rest left) (rest right)

func (++) : List a -> List a -> List a = \l \r fold< (::) r l

func concat : List (List a) -> List a = fold< (++) []

func pick : List a -> (a -> List b) -> List b =
    \list \f
    fold< (++) [] (map f list)

func any : (a -> Bool) -> List a -> Bool =
    \p
    fold< ((||) . p) false

func all : (a -> Bool) -> List a -> Bool =
    \p
    fold< ((&&) . p) true

func repeat : a -> List a = \x x :: repeat x

func replicate : Int -> List a -> List a =
    \n \list
    if (n <= 0)
        [];
    list ++ replicate (n - 1) list

func reverse : List a -> List a =
    \list
    [] |> list |> fix \loop \left \right
        if (empty? left)
            right;
        loop (rest left) (first left :: right)

func range : Int -> Int -> List Int =
    \from \to
    if (from > to)
        [];
    from :: range (from + 1) to

func iterate : (a -> a) -> a -> List a =
    \f \z
    z :: iterate f (f z)
