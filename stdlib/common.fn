func id    : a -> a             = \x x
func const : a -> b -> a        = \x \_ x
func let   : a -> (a -> b) -> b = \x \f f x
func fix   : (a -> a) -> a      = \f f (fix f)

func flip : (a -> b -> c) -> b -> a -> c = \f \x \y f y x

func . : (b -> c) -> (a -> b) -> a -> c =
    \f \g \x
    f (g x)

func . : (c -> d) -> (a -> b -> c) -> a -> b -> d =
    \f \g \x \y
    f (g x y)

func . : (d -> e) -> (a -> b -> c -> d) -> a -> b -> c -> e =
    \f \g \x \y \z
    f (g x y z)

func |> : a -> (a -> b) -> b = \x \f f x

func |> : (a -> b) -> (b -> c) -> a -> c =
    \g \f \x
    f (g x)

func when : Bool -> (a -> a) -> a -> a =
    \cond \then \next
    if cond (then next) next

func for : List a -> (a -> b -> b) -> b -> b =
    \list \body \next
    switch list
    case empty
        next
    case (::) \x \xs
        body x;
        for xs body;
        next

func dumpln : String -> a -> a = dump . (++ "\n")
