union Result a = error String | ok a

func error? : Result a -> Bool =
    \result
    switch result
    case error \msg true
    case ok \x      false

func ok? : Result a -> Bool =
    \result
    switch result
    case error \msg false
    case ok \x      true

func extract! : Result a -> a =
    \result
    switch result
    case error \msg panic ("extract!: error: " ++ msg)
    case ok \x      x

func maybe : Result a -> Maybe a =
    \result
    switch result
    case error \msg none
    case ok \x      some x

func list : Result a -> List a =
    \result
    switch result
    case error \msg []
    case ok \x      [x]

func let-ok : Result a -> (a -> Result b) -> Result b =
    \result \f
    switch result
    case error \msg error msg
    case ok \x      f x

func let-ok : Result a -> (a -> b) -> Result b =
    \result \f
    switch result
    case error \msg error msg
    case ok \x      ok (f x)

func if-ok : Result a -> (a -> b) -> b -> b =
    \result \then \else
    switch result
    case error \msg else
    case ok \x      then x

func when-ok : Result a -> (a -> b -> b) -> b -> b =
    \result \then \next
    switch result
    case error \msg next
    case ok \x      then x; next

func if-error : (String -> a) -> Result a -> a =
    \handle \result
    switch result
    case error \msg handle msg
    case ok \x      x

func ? : a -> Result a -> a =
    \default \result
    switch result
    case error \msg default
    case ok \x      x

func map : (a -> b) -> Result a -> Result b =
    \f \result
    switch result
    case error \msg error msg
    case ok \x      ok (f x)

func map-error : (String -> String) -> Result a -> Result a =
    \f \result
    switch result
    case error \msg error (f msg)
    case ok \x      ok x
