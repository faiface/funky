record Pair a b = first : a, second : b

func pair : a -> b -> Pair a b = Pair

func => : a -> b -> Pair a b = Pair

func map : (a -> b) -> Pair a a -> Pair b b =
    \f \p
    pair (f (first p)) (f (second p))

func map-first : (a -> b) -> Pair a t -> Pair b t =
    \f \p
    pair (f (first p)) (second p)

func map-second : (a -> b) -> Pair t a -> Pair t b =
    \f \p
    pair (first p) (f (second p))

func zip : (a -> b -> c) -> Pair a b -> c =
    \f \p
    f (first p) (second p)

func let-pair : Pair a b -> (a -> b -> c) -> c =
    \p \f
    f (first p) (second p)

func for-pair : List (Pair a b) -> (a -> b -> c -> c) -> c -> c =
    \list \body \next
    switch list
    case empty
        next
    case (::) \p \xs
        body (first p) (second p);
        for-pair xs body;
        next

func pick-pair : List (Pair a b) -> (a -> b -> List c) -> List c =
    \list \f
    (concat . map) (\p f (first p) (second p)) list
